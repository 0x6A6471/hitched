open React

external api_url : string = "import.meta.env.VITE_API_URL"

type user =
  { id : string
  ; email : string
  ; name : string
  }

type error = string

type login_data =
  { email : string
  ; password : string
  }

module Decode = struct
  let user json =
    Json.Decode.(
      json
      |> fun json ->
      try
        let id = field "id" string json in
        let email = field "email" string json in
        let name = field "name" string json in
        Ok { id; email; name }
      with
      | _ -> Error "Failed to decode user")
  ;;

  let error json =
    Json.Decode.(
      json
      |> fun json ->
      let message = field "error" string json in
      message)
  ;;
end

type context_value =
  { user : user option
  ; login : login_data -> unit Js.Promise.t
  ; logout : unit -> unit Js.Promise.t
  ; is_loading : bool
  ; error : error option
  ; set_error : (error option -> error option) -> unit
  }

let init =
  { user = None
  ; login = (fun _ -> Js.Promise.resolve ())
  ; is_loading = true
  ; logout = (fun _ -> Js.Promise.resolve ())
  ; error = None
  ; set_error = (fun _ -> ())
  }
;;

let auth_context = createContext init

module Provider = struct
  include Context

  let make = provider auth_context
end

module AuthProvider = struct
  let[@react.component] make ~children =
    let user, set_user = useState (fun _ -> None) in
    let error, set_error = useState (fun _ -> None) in
    let is_loading, set_is_loading = useState (fun _ -> true) in
    let login form_data =
      set_is_loading (fun _ -> true);
      let headers =
        let dict = Js.Dict.empty () in
        Js.Dict.set dict "Content-Type" "application/json";
        Fetch.HeadersInit.makeWithDict dict
      in
      let payload = Js.Dict.empty () in
      Js.Dict.set payload "email" (Js.Json.string form_data.email);
      Js.Dict.set payload "password" (Js.Json.string form_data.password);
      Js.Promise.(
        Fetch.fetchWithInit
          (api_url ^ "/api/auth/login")
          (Fetch.RequestInit.make
             ~method_:Post
             ()
             ~credentials:Include
             ~headers
             ~body:
               (Fetch.BodyInit.make
                  (Js.Json.stringify (Js.Json.object_ payload))))
        |> then_ Fetch.Response.json
        |> then_ (fun json ->
          match Decode.user json with
          | Ok user ->
            set_user (fun _ -> Some user);
            set_is_loading (fun _ -> false);
            ReasonReactRouter.push "/dashboard" |> resolve
          | Error _ ->
            let msg = Decode.error json in
            set_error (fun _ -> Some msg);
            set_is_loading (fun _ -> false) |> resolve)
        |> catch (fun err ->
          Js.log2 "Error in AuthContext login: " err;
          set_error (fun _ -> Some "invalid credentials") |> resolve))
    in
    let logout _ =
      set_is_loading (fun _ -> true);
      Js.Promise.(
        Fetch.fetchWithInit
          (api_url ^ "/api/auth/logout")
          (Fetch.RequestInit.make ~method_:Post () ~credentials:Include)
        |> then_ (fun _ ->
          set_user (fun _ -> None);
          set_is_loading (fun _ -> false);
          ReasonReactRouter.push "/" |> resolve)
        |> catch (fun _ ->
          set_user (fun _ -> None);
          set_is_loading (fun _ -> false);
          ReasonReactRouter.push "/" |> resolve))
    in
    let validate _ =
      Js.Promise.(
        Fetch.fetchWithInit
          (api_url ^ "/api/auth/validate")
          (Fetch.RequestInit.make () ~credentials:Include)
        |> then_ Fetch.Response.json
        |> then_ (fun json ->
          match Decode.user json with
          | Ok user ->
            set_user (fun _ -> Some user);
            set_is_loading (fun _ -> false) |> resolve
          | Error _ -> set_is_loading (fun _ -> false) |> resolve)
        |> catch (fun err ->
          Js.log2 "Error in AuthContext validate: " err;
          set_is_loading (fun _ -> false) |> resolve))
    in
    let url = ReasonReactRouter.useUrl () in
    useEffect0 (fun () ->
      match url.path with
      | [] | [ "login" ] ->
        set_is_loading (fun _ -> false);
        None
      | _ ->
        validate () |> ignore;
        None);
    let value = { user; login; is_loading; logout; error; set_error } in
    <Provider value>children</Provider>
  ;;
end
